name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      TDD_PHASE: green
    strategy:
      matrix:
        python-version: ["3.11"]

    # Add permissions for OIDC token generation
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - uses: actions/checkout@v4

    - name: Detect TDD phase
      if: github.event_name == 'pull_request'
      run: |
        PHASE="$TDD_PHASE"
        LABELS=$(echo '${{ toJSON(github.event.pull_request.labels) }}' | jq -r '.[].name' 2>/dev/null || true)
        HEAD_REF="${{ github.head_ref }}"
        if echo "$LABELS" | tr '[:upper:]' '[:lower:]' | grep -qx 'tdd-red-phase'; then
          PHASE="red"
        elif [[ "$HEAD_REF" == tdd-red/* ]]; then
          PHASE="red"
        fi
        echo "Detected labels: $LABELS"
        echo "Branch ref: $HEAD_REF"
        echo "TDD phase: $PHASE"
        echo "TDD_PHASE=$PHASE" >> $GITHUB_ENV

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    # Authenticate with Google Cloud using Workload Identity Federation
    # This step is optional - only needed if tests require BigQuery/GCP access
    - name: Authenticate to Google Cloud
      if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository
      uses: 'google-github-actions/auth@v2'
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
        project_id: 'konveyn2ai'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Validate version synchronization
      run: |
        # Validate that all linting tool versions are synchronized
        python scripts/validate_tool_versions.py

    - name: Verify installed tool versions
      run: |
        echo "=== Verifying installed tool versions ==="
        echo "Expected versions from requirements.txt:"
        grep -E "(black|ruff|mypy|bandit|pre-commit)==" requirements.txt
        echo ""
        echo "Installed versions:"
        black --version
        ruff --version
        mypy --version
        bandit --version
        pre-commit --version
        echo ""
        echo "=== Version verification complete ==="

        # Add to GitHub Actions Summary
        {
          echo "## üîß Tool Versions"
          echo "| Tool | Expected | Installed |"
          echo "|------|----------|-----------|"
          while IFS= read -r line; do
            tool=$(echo "$line" | sed 's/==.*//')
            expected_version=$(echo "$line" | sed 's/.*==//')
            case $tool in
              black) installed_version=$(black --version | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+') ;;
              ruff) installed_version=$(ruff --version | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+') ;;
              mypy) installed_version=$(mypy --version | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+') ;;
              bandit) installed_version=$(bandit --version | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+') ;;
              pre-commit) installed_version=$(pre-commit --version | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+') ;;
              *) installed_version="N/A" ;;
            esac
            echo "| $tool | $expected_version | $installed_version |"
          done < <(grep -E "(black|ruff|mypy|bandit|pre-commit)==" requirements.txt)
          echo ""
        } >> $GITHUB_STEP_SUMMARY

    - name: Run code quality validation (CHECK-ONLY MODE)
      run: |
        # CI runs in validation-only mode - NO file modifications allowed
        # All fixes must be applied locally before pushing to CI
        echo "üîç Running validation-only linting and formatting checks..."
        echo "‚ùå CI will FAIL if any issues are found - fix locally first!"

        # Use CI-specific pre-commit config with --check flags only
        if pre-commit run --config .pre-commit-config-ci.yaml --all-files; then
          echo "‚úÖ All code quality checks passed"
          QUALITY_STATUS="‚úÖ PASSED"
        else
          echo "‚ùå Code quality issues found"
          QUALITY_STATUS="‚ùå FAILED"
        fi

        # Add to GitHub Actions Summary
        {
          echo "## üîç Code Quality Results"
          echo "| Check | Status |"
          echo "|-------|--------|"
          echo "| Pre-commit hooks | $QUALITY_STATUS |"
          echo ""
          if [ "$QUALITY_STATUS" = "‚ùå FAILED" ]; then
            echo "### ‚ö†Ô∏è Issues Found"
            echo "Code quality validation failed. Please run \`pre-commit run --all-files\` locally to fix issues."
            echo ""
          fi
        } >> $GITHUB_STEP_SUMMARY

        # Exit with proper code
        if [ "$QUALITY_STATUS" = "‚ùå FAILED" ]; then
          exit 1
        fi

    - name: Ensure contract tests exist
      run: |
        if ! find tests -path 'tests/contract/*.py' -print -quit | grep -q .; then
          echo '::error::No contract tests found under tests/contract'
          exit 1
        fi

    - name: Setup test environment
      run: |
        # Create cache directory expected by some tests
        mkdir -p .cache/embeddings
        echo "Created .cache/embeddings directory for tests"

    - name: Run tests
      env:
        GOOGLE_CLOUD_PROJECT: 'konveyn2ai'
        BIGQUERY_DATASET_ID: 'semantic_gap_detector'
        BIGQUERY_INGESTION_DATASET_ID: 'source_ingestion'
      run: |
        echo "üß™ Running tests with TDD-aware evaluation"
        PYTHONPATH=src python -c "
        import subprocess
        import sys
        import re
        import os

        phase = os.environ.get('TDD_PHASE', 'green').lower()

        result = subprocess.run(['python', '-m', 'pytest', 'tests/', '-v', '--tb=short'],
                              capture_output=True, text=True, cwd='.')

        output = result.stdout + result.stderr
        print(output)

        match = re.search(r'(\d+) failed.*?(\d+) passed', output, re.DOTALL)
        if match:
            failed = int(match.group(1))
            passed = int(match.group(2))
            total = failed + passed
            pass_rate = (passed / total) * 100 if total > 0 else 0

            print(f'\nüìä Test Results: {passed}/{total} passed ({pass_rate:.1f}%) ‚Äî phase: {phase.upper()}')

            # Write test results to GitHub Actions Summary
            with open(os.environ['GITHUB_STEP_SUMMARY'], 'a') as f:
                f.write('## üß™ Test Results\n\n')
                f.write('| Metric | Value |\n')
                f.write('|--------|-------|\n')
                f.write(f'| **Tests Passed** | {passed} |\n')
                f.write(f'| **Tests Failed** | {failed} |\n')
                f.write(f'| **Total Tests** | {total} |\n')
                f.write(f'| **Pass Rate** | {pass_rate:.1f}% |\n')
                f.write(f'| **TDD Phase** | {phase.upper()} |\n')
                f.write('\n')

                if phase == 'red':
                    if failed > 0:
                        f.write('### ‚úÖ TDD RED Phase\n')
                        f.write('Failing tests detected as expected during RED phase (before implementation).\n\n')
                    else:
                        f.write('### ‚ùå TDD RED Phase Error\n')
                        f.write('RED phase indicated but no failing tests found.\n\n')
                else:
                    if pass_rate >= 70:
                        f.write('### ‚úÖ TDD GREEN Phase\n')
                        f.write(f'Pass rate ({pass_rate:.1f}%) meets the 70% threshold.\n\n')
                    else:
                        f.write('### ‚ùå TDD GREEN Phase Failed\n')
                        f.write(f'Pass rate ({pass_rate:.1f}%) below 70% threshold.\n\n')

                # Add test breakdown if there are failures
                if failed > 0:
                    f.write('### üìã Test Details\n')
                    f.write('```\n')
                    # Extract failed test names from output
                    failed_lines = [line for line in output.split('\n') if 'FAILED' in line]
                    for line in failed_lines[:10]:  # Limit to first 10 failures
                        f.write(line + '\n')
                    if len(failed_lines) > 10:
                        f.write(f'... and {len(failed_lines) - 10} more failures\n')
                    f.write('```\n\n')

            if total == 0:
                print('‚ùå No tests executed; CI cannot proceed.')
                sys.exit(1)

            if phase == 'red':
                if failed > 0:
                    print('‚úÖ RED phase detected: failing tests are expected before implementation.')
                    sys.exit(0)
                else:
                    print('‚ùå RED phase indicated but no failing tests were detected.')
                    sys.exit(1)
            else:
                if pass_rate >= 70:
                    print('‚úÖ GREEN phase: test pass rate meets threshold.')
                    sys.exit(0)
                else:
                    print('‚ùå GREEN phase: test pass rate below threshold.')
                    sys.exit(1)
        else:
            print('‚ùå Could not parse test results')
            # Still write to summary even if parsing failed
            with open(os.environ['GITHUB_STEP_SUMMARY'], 'a') as f:
                f.write('## ‚ùå Test Results Parse Error\n\n')
                f.write('Could not parse pytest output. Check logs for details.\n\n')
            sys.exit(1)
        "

    - name: Run project setup tests
      run: |
        PYTHONPATH=src python tests/test_project_setup.py

    - name: Generate CI Summary
      if: always()
      run: |
        # Generate overall CI summary
        {
          echo "## üìã CI Pipeline Summary"
          echo ""
          echo "| Component | Status |"
          echo "|-----------|--------|"

          # Check if each step completed successfully
          if [ -f "$GITHUB_STEP_SUMMARY" ] && grep -q "Tool Versions" "$GITHUB_STEP_SUMMARY"; then
            echo "| üîß Tool Versions | ‚úÖ Verified |"
          else
            echo "| üîß Tool Versions | ‚ùå Failed |"
          fi

          if [ -f "$GITHUB_STEP_SUMMARY" ] && grep -q "Code Quality Results" "$GITHUB_STEP_SUMMARY"; then
            if grep -q "‚úÖ PASSED" "$GITHUB_STEP_SUMMARY"; then
              echo "| üîç Code Quality | ‚úÖ Passed |"
            else
              echo "| üîç Code Quality | ‚ùå Failed |"
            fi
          else
            echo "| üîç Code Quality | ‚ùì Unknown |"
          fi

          if [ -f "$GITHUB_STEP_SUMMARY" ] && grep -q "Test Results" "$GITHUB_STEP_SUMMARY"; then
            if grep -q "TDD GREEN Phase" "$GITHUB_STEP_SUMMARY" && grep -q "‚úÖ" "$GITHUB_STEP_SUMMARY"; then
              echo "| üß™ Tests | ‚úÖ Passed |"
            elif grep -q "TDD RED Phase" "$GITHUB_STEP_SUMMARY" && grep -q "‚úÖ" "$GITHUB_STEP_SUMMARY"; then
              echo "| üß™ Tests | ‚úÖ RED Phase |"
            else
              echo "| üß™ Tests | ‚ùå Failed |"
            fi
          else
            echo "| üß™ Tests | ‚ùì Unknown |"
          fi

          echo ""
          echo "### üìä Quick Stats"
          if [ -f "$GITHUB_STEP_SUMMARY" ]; then
            if grep -q "Tests Passed" "$GITHUB_STEP_SUMMARY"; then
              passed=$(grep "Tests Passed" "$GITHUB_STEP_SUMMARY" | sed 's/.*| \([0-9]*\) |.*/\1/')
              total=$(grep "Total Tests" "$GITHUB_STEP_SUMMARY" | sed 's/.*| \([0-9]*\) |.*/\1/')
              pass_rate=$(grep "Pass Rate" "$GITHUB_STEP_SUMMARY" | sed 's/.*| \([0-9.]*\)% |.*/\1/')
              echo "- **Tests**: $passed/$total passed ($pass_rate%)"
            fi

            if grep -q "TDD Phase" "$GITHUB_STEP_SUMMARY"; then
              phase=$(grep "TDD Phase" "$GITHUB_STEP_SUMMARY" | sed 's/.*| \([A-Z]*\) |.*/\1/')
              echo "- **TDD Phase**: $phase"
            fi
          fi

          echo ""
          echo "---"
          echo "*View detailed results in the sections above*"

        } >> $GITHUB_STEP_SUMMARY
