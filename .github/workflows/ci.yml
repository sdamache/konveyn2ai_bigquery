name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      TDD_PHASE: green
    strategy:
      matrix:
        python-version: ["3.11"]

    # Add permissions for OIDC token generation
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - uses: actions/checkout@v4

    - name: Detect TDD phase
      if: github.event_name == 'pull_request'
      run: |
        PHASE="$TDD_PHASE"
        LABELS=$(echo '${{ toJSON(github.event.pull_request.labels) }}' | jq -r '.[].name' 2>/dev/null || true)
        HEAD_REF="${{ github.head_ref }}"
        if echo "$LABELS" | tr '[:upper:]' '[:lower:]' | grep -qx 'tdd-red-phase'; then
          PHASE="red"
        elif [[ "$HEAD_REF" == tdd-red/* ]]; then
          PHASE="red"
        fi
        echo "Detected labels: $LABELS"
        echo "Branch ref: $HEAD_REF"
        echo "TDD phase: $PHASE"
        echo "TDD_PHASE=$PHASE" >> $GITHUB_ENV

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    # Authenticate with Google Cloud using Workload Identity Federation
    # This step is optional - only needed if tests require BigQuery/GCP access
    - name: Authenticate to Google Cloud
      if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository
      uses: 'google-github-actions/auth@v2'
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
        project_id: 'konveyn2ai'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Validate version synchronization
      run: |
        # Validate that all linting tool versions are synchronized
        python scripts/validate_tool_versions.py

    - name: Verify installed tool versions
      run: |
        echo "=== Verifying installed tool versions ==="
        echo "Expected versions from requirements.txt:"
        grep -E "(black|ruff|mypy|bandit|pre-commit)==" requirements.txt
        echo ""
        echo "Installed versions:"
        black --version
        ruff --version
        mypy --version
        bandit --version
        pre-commit --version
        echo ""
        echo "=== Version verification complete ==="

    - name: Run code quality validation (CHECK-ONLY MODE)
      run: |
        # CI runs in validation-only mode - NO file modifications allowed
        # All fixes must be applied locally before pushing to CI
        echo "üîç Running validation-only linting and formatting checks..."
        echo "‚ùå CI will FAIL if any issues are found - fix locally first!"

        # Use CI-specific pre-commit config with --check flags only
        pre-commit run --config .pre-commit-config-ci.yaml --all-files

    - name: Ensure contract tests exist
      run: |
        if ! find tests -path 'tests/contract/*.py' -print -quit | grep -q .; then
          echo '::error::No contract tests found under tests/contract'
          exit 1
        fi

    - name: Setup test environment
      run: |
        # Create cache directory expected by some tests
        mkdir -p .cache/embeddings
        echo "Created .cache/embeddings directory for tests"

    - name: Run tests
      env:
        GOOGLE_CLOUD_PROJECT: 'konveyn2ai'
        BIGQUERY_DATASET_ID: 'semantic_gap_detector'
        BIGQUERY_INGESTION_DATASET_ID: 'source_ingestion'
      run: |
        echo "üß™ Running tests with TDD-aware evaluation"
        PYTHONPATH=src python -c "
        import subprocess
        import sys
        import re
        import os

        phase = os.environ.get('TDD_PHASE', 'green').lower()

        result = subprocess.run(['python', '-m', 'pytest', 'tests/', '-v', '--tb=short'],
                              capture_output=True, text=True, cwd='.')

        output = result.stdout + result.stderr
        print(output)

        match = re.search(r'(\d+) failed.*?(\d+) passed', output, re.DOTALL)
        if match:
            failed = int(match.group(1))
            passed = int(match.group(2))
            total = failed + passed
            pass_rate = (passed / total) * 100 if total > 0 else 0

            print(f'\nüìä Test Results: {passed}/{total} passed ({pass_rate:.1f}%) ‚Äî phase: {phase.upper()}')

            if total == 0:
                print('‚ùå No tests executed; CI cannot proceed.')
                sys.exit(1)

            if phase == 'red':
                if failed > 0:
                    print('‚úÖ RED phase detected: failing tests are expected before implementation.')
                    sys.exit(0)
                else:
                    print('‚ùå RED phase indicated but no failing tests were detected.')
                    sys.exit(1)
            else:
                if pass_rate >= 70:
                    print('‚úÖ GREEN phase: test pass rate meets threshold.')
                    sys.exit(0)
                else:
                    print('‚ùå GREEN phase: test pass rate below threshold.')
                    sys.exit(1)
        else:
            print('‚ùå Could not parse test results')
            sys.exit(1)
        "

    - name: Run project setup tests
      run: |
        PYTHONPATH=src python tests/test_project_setup.py
