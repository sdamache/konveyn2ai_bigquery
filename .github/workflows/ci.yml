name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      TDD_PHASE: green
    strategy:
      matrix:
        python-version: ["3.11"]

    # Add permissions for OIDC token generation
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - uses: actions/checkout@v4

    - name: Initialize CI Summary
      run: |
        echo "# üöÄ KonveyN2AI BigQuery CI Pipeline" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üìã **Pipeline Status**: Running..." >> $GITHUB_STEP_SUMMARY
        echo "üîß **Python Version**: ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
        echo "üåø **Branch**: \`${{ github.head_ref || github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

    - name: Detect TDD phase
      if: github.event_name == 'pull_request'
      run: |
        PHASE="$TDD_PHASE"
        # Get labels as comma-separated list instead of newline-separated
        LABELS=$(echo '${{ toJSON(github.event.pull_request.labels) }}' | jq -r '.[].name' 2>/dev/null | tr '\n' ', ' | sed 's/, *$//' || true)
        HEAD_REF="${{ github.head_ref }}"

        # Check for TDD phase in labels (handle comma-separated list)
        LABELS_LOWER=$(echo "$LABELS" | tr '[:upper:]' '[:lower:]')
        if echo "$LABELS_LOWER" | grep -q 'tdd-red-phase'; then
          PHASE="red"
        elif [[ "$HEAD_REF" == tdd-red/* ]]; then
          PHASE="red"
        fi

        echo "Detected labels: $LABELS"
        echo "Branch ref: $HEAD_REF"
        echo "TDD phase: $PHASE"
        echo "TDD_PHASE=$PHASE" >> $GITHUB_ENV

        # Add TDD phase to summary
        echo "## üß™ TDD Phase Detection" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Setting | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| **Current Phase** | \`$PHASE\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Branch Ref** | \`${HEAD_REF:-main}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Labels** | \`${LABELS:-none}\` |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    # Authenticate with Google Cloud using Workload Identity Federation
    # This step is optional - only needed if tests require BigQuery/GCP access
    - name: Authenticate to Google Cloud
      if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository
      uses: 'google-github-actions/auth@v2'
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
        project_id: 'konveyn2ai'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        echo "## üì¶ Dependencies Installation" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        python -m pip install --upgrade pip
        pip install -r requirements.txt

        echo "‚úÖ **Status**: Dependencies installed successfully" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

    - name: Validate version synchronization
      run: |
        # Validate that all linting tool versions are synchronized
        python scripts/validate_tool_versions.py

    - name: Verify installed tool versions
      run: |
        echo "=== Verifying installed tool versions ==="
        echo "Expected versions from requirements.txt:"
        grep -E "(black|ruff|mypy|bandit|pre-commit)==" requirements.txt
        echo ""
        echo "Installed versions:"
        black --version
        ruff --version
        mypy --version
        bandit --version
        pre-commit --version
        echo ""
        echo "=== Version verification complete ==="

        # Add to GitHub Actions Summary
        echo "## üîß Tool Version Verification" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Tool | Expected | Installed | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------|----------|-----------|--------|" >> $GITHUB_STEP_SUMMARY

        while IFS= read -r line; do
          tool=$(echo "$line" | sed 's/==.*//')
          expected_version=$(echo "$line" | sed 's/.*==//')
          case $tool in
            black) installed_version=$(black --version 2>/dev/null | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+' | head -1) ;;
            ruff) installed_version=$(ruff --version 2>/dev/null | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+' | head -1) ;;
            mypy) installed_version=$(mypy --version 2>/dev/null | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+' | head -1) ;;
            bandit) installed_version=$(bandit --version 2>/dev/null | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+' | head -1) ;;
            pre-commit) installed_version=$(pre-commit --version 2>/dev/null | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+' | head -1) ;;
            *) installed_version="N/A" ;;
          esac

          # Default to N/A if version couldn't be extracted
          if [ -z "$installed_version" ]; then
            installed_version="N/A"
          fi

          if [ "$expected_version" = "$installed_version" ]; then
            status="‚úÖ Match"
          else
            status="‚ö†Ô∏è Diff"
          fi

          echo "| \`$tool\` | \`$expected_version\` | \`$installed_version\` | $status |" >> $GITHUB_STEP_SUMMARY
        done < <(grep -E "(black|ruff|mypy|bandit|pre-commit)==" requirements.txt)

        echo "" >> $GITHUB_STEP_SUMMARY

    - name: Run code quality validation (CHECK-ONLY MODE)
      run: |
        # CI runs in validation-only mode - NO file modifications allowed
        # All fixes must be applied locally before pushing to CI
        echo "üîç Running validation-only linting and formatting checks..."
        echo "‚ùå CI will FAIL if any issues are found - fix locally first!"

        # Use CI-specific pre-commit config with --check flags only
        if pre-commit run --config .pre-commit-config-ci.yaml --all-files; then
          echo "‚úÖ All code quality checks passed"
          QUALITY_STATUS="‚úÖ PASSED"
        else
          echo "‚ùå Code quality issues found"
          QUALITY_STATUS="‚ùå FAILED"
        fi

        # Add to GitHub Actions Summary
        echo "## üîç Code Quality Validation" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check Type | Result | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|--------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| **Pre-commit Hooks** | $QUALITY_STATUS | All linting rules enforced |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "$QUALITY_STATUS" = "‚ùå FAILED" ]; then
          echo "<details>" >> $GITHUB_STEP_SUMMARY
          echo "<summary>‚ö†Ô∏è Issues Found - Click to expand</summary>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Code quality validation failed. Please run the following locally to fix issues:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "pre-commit run --all-files" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi

        # Exit with proper code
        if [ "$QUALITY_STATUS" = "‚ùå FAILED" ]; then
          exit 1
        fi

    - name: Ensure contract tests exist
      run: |
        if ! find tests -path 'tests/contract/*.py' -print -quit | grep -q .; then
          echo '::error::No contract tests found under tests/contract'
          exit 1
        fi

    - name: Setup test environment
      run: |
        # Create cache directory expected by some tests
        mkdir -p .cache/embeddings
        echo "Created .cache/embeddings directory for tests"

    - name: Run tests
      env:
        GOOGLE_CLOUD_PROJECT: 'konveyn2ai'
        BIGQUERY_DATASET_ID: 'semantic_gap_detector'
        BIGQUERY_INGESTION_DATASET_ID: 'source_ingestion'
      run: |
        echo "üß™ Running tests with TDD-aware evaluation"
        PYTHONPATH=src python -c "
        import subprocess
        import sys
        import re
        import os

        phase = os.environ.get('TDD_PHASE', 'green').lower()

        result = subprocess.run(['python', '-m', 'pytest', 'tests/', '-v', '--tb=short'],
                              capture_output=True, text=True, cwd='.')

        output = result.stdout + result.stderr
        print(output)

        # Try multiple patterns to extract test results
        failed = 0
        passed = 0

        # Pattern 1: "X failed, Y passed" or "X passed, Y failed"
        match = re.search(r'(\d+) failed.*?(\d+) passed', output, re.DOTALL)
        if match:
            failed = int(match.group(1))
            passed = int(match.group(2))
        else:
            # Pattern 2: Only passed tests (no failures)
            match = re.search(r'(\d+) passed', output)
            if match:
                passed = int(match.group(1))
                failed = 0
            else:
                # Pattern 3: Alternative pytest format "=== X passed, Y failed ==="
                match = re.search(r'=+\s*(\d+)\s+passed(?:.*?(\d+)\s+failed)?', output)
                if match:
                    passed = int(match.group(1))
                    failed = int(match.group(2)) if match.group(2) else 0

        total = failed + passed
        pass_rate = (passed / total) * 100 if total > 0 else 0

        print(f'\nüìä Test Results: {passed}/{total} passed ({pass_rate:.1f}%) ‚Äî phase: {phase.upper()}')
        print(f'Debug: Passed={passed}, Failed={failed}, Total={total}')

        # Always write results even if counts are 0
        if total >= 0:

            with open(os.environ['GITHUB_STEP_SUMMARY'], 'a') as f:
                f.write('## üß™ Test Execution Results\n\n')

                # Status indicator based on phase and results
                if phase == 'red':
                    if failed > 0:
                        status_icon = '‚úÖ'
                        status_text = 'RED phase successful'
                    else:
                        status_icon = '‚ùå'
                        status_text = 'RED phase error'
                else:
                    if pass_rate >= 70:
                        status_icon = '‚úÖ'
                        status_text = 'GREEN phase successful'
                    else:
                        status_icon = '‚ùå'
                        status_text = 'GREEN phase failed'

                f.write(f'**Overall Status**: {status_icon} {status_text}\n\n')

                # Display actual numeric values
                f.write('### üìä Test Metrics\n\n')
                f.write('| Metric | Value | Target | Status |\n')
                f.write('|:-------|------:|-------:|:------:|\n')
                f.write(f'| Tests Passed | **{str(passed)}** | - | - |\n')
                f.write(f'| Tests Failed | **{str(failed)}** | - | - |\n')
                f.write(f'| Total Tests | **{str(total)}** | - | - |\n')
                pass_status = '‚úÖ' if pass_rate >= 70 else '‚ùå'
                f.write(f'| Pass Rate | **{pass_rate:.1f}%** | ‚â•70% | {pass_status} |\n')
                f.write(f'| TDD Phase | **{phase.upper()}** | - | - |\n')
                f.write('\n')

                # Phase-specific messaging
                if phase == 'red':
                    if failed > 0:
                        f.write('### ‚úÖ TDD RED Phase Success\n')
                        f.write('Failing tests detected as expected during RED phase (before implementation).\n\n')
                    else:
                        f.write('### ‚ùå TDD RED Phase Error\n')
                        f.write('RED phase indicated but no failing tests found. This suggests tests may not be properly written.\n\n')
                else:
                    if pass_rate >= 70:
                        f.write('### ‚úÖ TDD GREEN Phase Success\n')
                        f.write(f'Pass rate ({pass_rate:.1f}%) meets the 70% threshold requirement.\n\n')
                    else:
                        f.write('### ‚ùå TDD GREEN Phase Failed\n')
                        f.write(f'Pass rate ({pass_rate:.1f}%) below required 70% threshold.\n\n')

                # Add collapsible test breakdown if there are failures
                if failed > 0:
                    f.write('<details>\n')
                    f.write(f'<summary>üìã Failed Tests ({str(failed)} failures) - Click to expand</summary>\n\n')
                    f.write('```\n')
                    # Extract failed test names from output
                    failed_lines = [line for line in output.split('\n') if 'FAILED' in line]
                    for line in failed_lines[:10]:  # Limit to first 10 failures
                        f.write(line + '\n')
                    if len(failed_lines) > 10:
                        remaining = len(failed_lines) - 10
                        f.write(f'... and {str(remaining)} more failures\n')
                    f.write('```\n')
                    f.write('</details>\n\n')

            if total == 0:
                print('‚ùå No tests executed; CI cannot proceed.')
                sys.exit(1)

            if phase == 'red':
                if failed > 0:
                    print('‚úÖ RED phase detected: failing tests are expected before implementation.')
                    sys.exit(0)
                else:
                    print('‚ùå RED phase indicated but no failing tests were detected.')
                    sys.exit(1)
            else:
                if pass_rate >= 70:
                    print('‚úÖ GREEN phase: test pass rate meets threshold.')
                    sys.exit(0)
                else:
                    print('‚ùå GREEN phase: test pass rate below threshold.')
                    sys.exit(1)
        else:
            print('‚ùå Could not parse test results')
            print('Debug: Could not match any test result patterns in output')
            # Still write to summary even if parsing failed
            with open(os.environ['GITHUB_STEP_SUMMARY'], 'a') as f:
                f.write('## ‚ùå Test Results Parse Error\n\n')
                f.write('‚ö†Ô∏è Could not parse pytest output properly.\n\n')
                f.write('<details>\n')
                f.write('<summary>üîç Debugging Information</summary>\n\n')
                f.write('Check the workflow logs for detailed test output and error messages.\n\n')
                f.write('Pytest output did not match expected patterns.\n\n')
                f.write('</details>\n\n')
            sys.exit(1)
        "

    - name: Run project setup tests
      run: |
        echo "## üîß Project Setup Validation" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if PYTHONPATH=src python tests/test_project_setup.py; then
          echo "‚úÖ **Status**: Project setup tests passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Status**: Project setup tests failed" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY

    - name: Finalize CI Summary
      if: always()
      run: |
        # Generate final pipeline summary
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üìä Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Determine overall pipeline status
        if grep -q "‚ùå" "$GITHUB_STEP_SUMMARY" 2>/dev/null; then
          OVERALL_STATUS="‚ùå Failed"
          STATUS_COLOR="üî¥"
        elif grep -q "‚ö†Ô∏è" "$GITHUB_STEP_SUMMARY" 2>/dev/null; then
          OVERALL_STATUS="‚ö†Ô∏è Warning"
          STATUS_COLOR="üü°"
        else
          OVERALL_STATUS="‚úÖ Success"
          STATUS_COLOR="üü¢"
        fi

        echo "$STATUS_COLOR **Overall Result**: $OVERALL_STATUS" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Stage | Status | Notes |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|-------|" >> $GITHUB_STEP_SUMMARY

        # Check each component status
        if grep -q "Tool Version Verification" "$GITHUB_STEP_SUMMARY"; then
          if grep -q "‚ö†Ô∏è Diff" "$GITHUB_STEP_SUMMARY"; then
            echo "| üîß Tool Versions | ‚ö†Ô∏è Warning | Version mismatches detected |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| üîß Tool Versions | ‚úÖ Passed | All versions match |" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "| üîß Tool Versions | ‚ùì Unknown | Check not completed |" >> $GITHUB_STEP_SUMMARY
        fi

        if grep -q "Code Quality Validation" "$GITHUB_STEP_SUMMARY"; then
          if grep -q "‚úÖ PASSED" "$GITHUB_STEP_SUMMARY"; then
            echo "| üîç Code Quality | ‚úÖ Passed | All linting rules satisfied |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| üîç Code Quality | ‚ùå Failed | Linting issues found |" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "| üîç Code Quality | ‚ùì Unknown | Check not completed |" >> $GITHUB_STEP_SUMMARY
        fi

        if grep -q "Test Execution Results" "$GITHUB_STEP_SUMMARY"; then
          if grep -q "GREEN phase successful" "$GITHUB_STEP_SUMMARY"; then
            echo "| üß™ Tests | ‚úÖ Passed | GREEN phase completed |" >> $GITHUB_STEP_SUMMARY
          elif grep -q "RED phase successful" "$GITHUB_STEP_SUMMARY"; then
            echo "| üß™ Tests | ‚úÖ RED Phase | Expected failures detected |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| üß™ Tests | ‚ùå Failed | Phase requirements not met |" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "| üß™ Tests | ‚ùì Unknown | Tests not executed |" >> $GITHUB_STEP_SUMMARY
        fi

        if grep -q "Project Setup Validation" "$GITHUB_STEP_SUMMARY"; then
          if grep -q "Project setup tests passed" "$GITHUB_STEP_SUMMARY"; then
            echo "| üîß Setup | ‚úÖ Passed | Configuration validated |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| üîß Setup | ‚ùå Failed | Setup validation failed |" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "| üîß Setup | ‚ùì Unknown | Validation not run |" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üí° **Next Steps**: Review any failed stages above and address issues before merging." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üìã **For detailed logs**: Check individual step outputs in the workflow run." >> $GITHUB_STEP_SUMMARY
