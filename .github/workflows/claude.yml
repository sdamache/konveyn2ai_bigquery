name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Allow Claude to make changes to files
      pull-requests: write  # Allow Claude to create/update PRs
      issues: write  # Allow Claude to update issues
      id-token: write
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better context
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          
          # Remove tool restrictions to allow full functionality
          claude_args: |
            --model claude-sonnet-4-20250514
            --max-turns 10
            --allowed-tools "Read,Edit,Write,TodoWrite,Glob,Grep,Bash(make:*),Bash(pytest:*),Bash(python:*),Bash(pre-commit run:*),Bash(gh pr:*),Bash(gh issue:*),Bash(gh api:*),Bash(black:*)"
          
          prompt: |
            This is a BigQuery AI Hackathon project with a three-tier architecture. 
            Key project guidelines:
            - Follow instructions in CLAUDE.md for project-specific protocols
            - Prefer editing existing files over creating new ones
            - Focus on functional implementation over mocks for demo readiness
            - Use make commands for BigQuery operations when needed
            - This is a Python/FastAPI backend with BigQuery integration
            - Always examine the codebase first to understand current implementation
            - Create meaningful commits with clear messages
            - Run pytest and ruff before returning results and include command output in your response

            When working with GitHub issues and PRs:
            1. Use gh commands to fetch context and understand the full scope
            2. Read relevant files to understand current implementation
            3. Make focused, incremental changes
            4. Verify changes work as expected