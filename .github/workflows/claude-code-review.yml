name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize]
    # Optional: Only run on specific file changes
    # paths:
    #   - "src/**/*.ts"
    #   - "src/**/*.tsx"
    #   - "src/**/*.js"
    #   - "src/**/*.jsx"

jobs:
  claude-review:
    # Optional: Filter by PR author
    # if: |
    #   github.event.pull_request.user.login == 'external-contributor' ||
    #   github.event.pull_request.user.login == 'new-developer' ||
    #   github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR'
    
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Configure Claude using claude_args (v1 format)
          claude_args: |
            --model claude-sonnet-4-20250514
            --max-turns 5
            --allowed-tools "Bash(gh issue view:*),Bash(gh search:*),Bash(gh issue list:*),Bash(gh pr comment:*),Bash(gh pr diff:*),Bash(gh pr view:*),Bash(gh pr list:*),Bash(gh api:*)"

          # Prompt for automated review (no @claude mention needed)
          prompt: |
            Review this PR for the BigQuery AI Hackathon project following CLAUDE.md protocols:

            **ðŸ”¥ MANDATORY FILE EDITING POLICY:**
            - Verify: Are existing files being enhanced rather than new files created?
            - Check: Is this following "edit-first, create-last" principle?
            - Flag: Any unnecessary file creation that could be consolidation

            **ðŸ§ª DEMO READINESS:**
            - Verify: Real functionality (not mocks) for core BigQuery features
            - Check: Code works for live demo presentation
            - Assess: Integration with BigQuery/Gemini API is functional

            **ðŸŽ¯ ARCHITECTURE COMPLIANCE:**
            - Tier 1: BigQuery Studio/Colab + static HTML viewer components
            - Tier 2: Python CLI/Make targets, Svami orchestrator, Janapada memory
            - Tier 3: BigQuery as system of record (source_metadata, source_embeddings, gap_metrics)

            **ðŸš€ CODE QUALITY:**
            - Python/FastAPI best practices for hackathon speed
            - BigQuery integration patterns and security
            - Make command usage and M1 ingestion workflows
            - Test coverage for functional (not style) requirements

            Focus on functional implementation over perfect code style. Be constructive and hackathon-speed oriented.

            Use `gh pr comment` to leave your review as a comment on the PR.

