# Google Cloud Build configuration for KonveyN2AI
# Builds and deploys core services (Janapada, Amatya, Svami) and the Streamlit documentation dashboard to Cloud Run

steps:
  # Build Janapada Memory Service
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-f'
      - 'Dockerfile.janapada'
      - '-t'
      - '${_ARTIFACT_REGISTRY_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/janapada:${SHORT_SHA}'
      - '-t'
      - '${_ARTIFACT_REGISTRY_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/janapada:latest'
      - '.'
    id: 'build-janapada'

  # Build Amatya Role Prompter Service
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-f'
      - 'Dockerfile.amatya'
      - '-t'
      - '${_ARTIFACT_REGISTRY_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/amatya:${SHORT_SHA}'
      - '-t'
      - '${_ARTIFACT_REGISTRY_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/amatya:latest'
      - '.'
    id: 'build-amatya'

  # Build Svami Orchestrator Service
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-f'
      - 'Dockerfile.svami'
      - '-t'
      - '${_ARTIFACT_REGISTRY_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/svami:${SHORT_SHA}'
      - '-t'
      - '${_ARTIFACT_REGISTRY_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/svami:latest'
      - '.'
    id: 'build-svami'

  # Build Streamlit documentation dashboard
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-f'
      - 'Dockerfile.streamlit'
      - '-t'
      - '${_ARTIFACT_REGISTRY_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/coverage-dashboard:${SHORT_SHA}'
      - '-t'
      - '${_ARTIFACT_REGISTRY_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/coverage-dashboard:latest'
      - '.'
    id: 'build-dashboard'

  # Push Janapada image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '${_ARTIFACT_REGISTRY_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/janapada:${SHORT_SHA}'
    waitFor: ['build-janapada']
    id: 'push-janapada'

  # Push Amatya image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '${_ARTIFACT_REGISTRY_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/amatya:${SHORT_SHA}'
    waitFor: ['build-amatya']
    id: 'push-amatya'

  # Push Svami image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '${_ARTIFACT_REGISTRY_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/svami:${SHORT_SHA}'
    waitFor: ['build-svami']
    id: 'push-svami'

  # Push dashboard image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '${_ARTIFACT_REGISTRY_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/coverage-dashboard:${SHORT_SHA}'
    waitFor: ['build-dashboard']
    id: 'push-dashboard'

  # Deploy Janapada to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - 'janapada'
      - '--image'
      - '${_ARTIFACT_REGISTRY_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/janapada:${SHORT_SHA}'
      - '--region'
      - '${_CLOUD_RUN_REGION}'
      - '--platform'
      - 'managed'
      - '--memory'
      - '512Mi'
      - '--cpu'
      - '1'
      - '--min-instances'
      - '1'
      - '--max-instances'
      - '10'
      - '--port'
      - '8080'
      - '--set-env-vars'
      - 'GOOGLE_CLOUD_PROJECT=${PROJECT_ID},INDEX_ENDPOINT_ID=${_INDEX_ENDPOINT_ID},INDEX_ID=${_INDEX_ID},ENVIRONMENT=production'
      - '--service-account'
      - '${_SERVICE_ACCOUNT_EMAIL}'
      - '--allow-unauthenticated'
    waitFor: ['push-janapada']
    id: 'deploy-janapada'

  # Deploy Amatya to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - 'amatya'
      - '--image'
      - '${_ARTIFACT_REGISTRY_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/amatya:${SHORT_SHA}'
      - '--region'
      - '${_CLOUD_RUN_REGION}'
      - '--platform'
      - 'managed'
      - '--memory'
      - '512Mi'
      - '--cpu'
      - '1'
      - '--min-instances'
      - '1'
      - '--max-instances'
      - '10'
      - '--port'
      - '8080'
      - '--set-env-vars'
      - 'GOOGLE_CLOUD_PROJECT=${PROJECT_ID},GOOGLE_API_KEY=${_GOOGLE_API_KEY},ENVIRONMENT=production'
      - '--service-account'
      - '${_SERVICE_ACCOUNT_EMAIL}'
      - '--allow-unauthenticated'
    waitFor: ['push-amatya']
    id: 'deploy-amatya'

  # Deploy Svami to Cloud Run (after other services are deployed)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - 'svami'
      - '--image'
      - '${_ARTIFACT_REGISTRY_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/svami:${SHORT_SHA}'
      - '--region'
      - '${_CLOUD_RUN_REGION}'
      - '--platform'
      - 'managed'
      - '--memory'
      - '512Mi'
      - '--cpu'
      - '1'
      - '--min-instances'
      - '1'
      - '--max-instances'
      - '10'
      - '--port'
      - '8080'
      - '--set-env-vars'
      - 'GOOGLE_CLOUD_PROJECT=${PROJECT_ID},JANAPADA_URL=https://janapada-${_CLOUD_RUN_HASH}-${_CLOUD_RUN_REGION}.a.run.app,AMATYA_URL=https://amatya-${_CLOUD_RUN_HASH}-${_CLOUD_RUN_REGION}.a.run.app,ENVIRONMENT=production'
      - '--service-account'
      - '${_SERVICE_ACCOUNT_EMAIL}'
      - '--allow-unauthenticated'
    waitFor: ['deploy-janapada', 'deploy-amatya']
    id: 'deploy-svami'

  # Deploy documentation dashboard to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - 'coverage-dashboard'
      - '--image'
      - '${_ARTIFACT_REGISTRY_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/coverage-dashboard:${SHORT_SHA}'
      - '--region'
      - '${_CLOUD_RUN_REGION}'
      - '--platform'
      - 'managed'
      - '--memory'
      - '512Mi'
      - '--cpu'
      - '1'
      - '--min-instances'
      - '0'
      - '--max-instances'
      - '10'
      - '--port'
      - '8080'
      - '--set-env-vars'
      - 'GOOGLE_CLOUD_PROJECT=${PROJECT_ID},DOCUMENTATION_DATASET=${_DOCUMENTATION_DATASET}'
      - '--service-account'
      - '${_SERVICE_ACCOUNT_EMAIL}'
      - '--allow-unauthenticated'
    waitFor: ['push-dashboard']
    id: 'deploy-dashboard'

# Build timeout (30 minutes)
timeout: 1800s

# Substitution variables (to be set during build trigger)
substitutions:
  _ARTIFACT_REGISTRY_REGION: us-central1
  _REPOSITORY: konveyn2ai-repo
  _CLOUD_RUN_REGION: us-central1
  _SERVICE_ACCOUNT_EMAIL: konveyn2ai-service@${PROJECT_ID}.iam.gserviceaccount.com
  _INDEX_ENDPOINT_ID: ${INDEX_ENDPOINT_ID}
  _INDEX_ID: ${INDEX_ID}
  _GOOGLE_API_KEY: ${GOOGLE_API_KEY}
  _CLOUD_RUN_HASH: uc
  _DOCUMENTATION_DATASET: documentation_ops

# Options for the build
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
