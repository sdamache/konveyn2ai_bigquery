# Multi-stage Dockerfile for the Streamlit documentation coverage dashboard
# Optimised for Cloud Run deployment

# Stage 1: build dependencies
FROM python:3.11-slim AS builder

RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy requirements first to leverage Docker layer caching
COPY requirements.txt ./requirements.txt

# Install Python dependencies into the user site-packages (will be copied later)
RUN pip install --no-cache-dir --user -r requirements.txt

# Stage 2: runtime image
FROM python:3.11-slim

RUN apt-get update && apt-get install -y \
    curl \
    libgomp1 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create a non-root user for security hardening
RUN useradd --create-home --shell /bin/bash appuser

WORKDIR /app

# Copy installed Python packages from the builder layer
COPY --from=builder /root/.local /home/appuser/.local

# Copy application source
COPY . .

# Ensure the new user owns the application directory
RUN chown -R appuser:appuser /app

USER appuser

# Update path/pythonpath so user-level packages are available
ENV PATH=/home/appuser/.local/bin:$PATH \
    PYTHONPATH=/app

# Cloud Run injects $PORT; configure Streamlit to respect it
ENV PORT=8080 \
    STREAMLIT_SERVER_PORT=8080 \
    STREAMLIT_SERVER_ADDRESS=0.0.0.0 \
    STREAMLIT_SERVER_HEADLESS=true \
    STREAMLIT_SERVER_ENABLECORS=false \
    STREAMLIT_SERVER_ENABLEXSRSFPROTECTION=false

EXPOSE 8080

CMD ["streamlit", "run", "analytics/dashboard/coverage_dashboard.py"]
