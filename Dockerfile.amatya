# Multi-stage Dockerfile for Amatya Role Prompter Service
# Optimized for Cloud Run deployment with Gemini AI integration

# Stage 1: Build dependencies
FROM python:3.11-slim AS builder

# Install system dependencies for building
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy consolidated requirements file
COPY requirements.txt ./requirements.txt

# Install Python dependencies
RUN pip install --no-cache-dir --user -r requirements.txt

# Stage 2: Runtime image
FROM python:3.11-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user for security
RUN useradd --create-home --shell /bin/bash appuser

# Set working directory
WORKDIR /app

# Copy Python packages from builder stage
COPY --from=builder /root/.local /home/appuser/.local

# Copy application code
COPY src/common/ ./src/common/
COPY src/guard_fort/ ./src/guard_fort/
COPY src/amatya-role-prompter/ ./src/amatya-role-prompter/

# Set ownership to appuser
RUN chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Add local Python packages to PATH
ENV PATH=/home/appuser/.local/bin:$PATH
ENV PYTHONPATH=/app:/app/src

# Build arguments (passed during docker build)
ARG GOOGLE_CLOUD_PROJECT

# Environment variables for Cloud Run and Gemini AI
ENV PORT=8080
ENV AMATYA_HOST=0.0.0.0
ENV AMATYA_PORT=8080
ENV GOOGLE_CLOUD_PROJECT=${GOOGLE_CLOUD_PROJECT}
# GOOGLE_API_KEY will be set at runtime via Cloud Run environment variables

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Run the application
WORKDIR /app/src/amatya-role-prompter
CMD ["sh", "-c", "PYTHONPATH=/app:/app/src python -m uvicorn main:app --host 0.0.0.0 --port 8080"]